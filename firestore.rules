rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // all docs
    // match /{document=**} {
    //   allow read: if true;
    //   allow write: if request.auth != null;
    // }
    match /_feedback/{feedbackId} {
      allow read: if false;
      allow write: if request.auth != null;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if false;
      // users to update themselves
      allow update: if request.auth.uid == userId;
      // deny all deletes
      allow delete: if false;
    }

    match /bootstrap/{bootstrapId} {
      allow read: if true;
      allow write: if false;
    }
    match /domains/{domainId} {
      allow read: if true;
      allow write: if false;
    }
    match /goals/{goalId} {
      allow read: if true;
      allow write: if false;
    }

    match /paths/{pathId} {
      // anyone can read and create
      allow read, create: if true;
      // users to update path if they're the author
      allow update: if request.auth.uid == resource.data.author;
      // deny all deletes
      allow delete: if false;
    }

    match /paces/{paceId} {
      // anyone can read and create
      allow read, create: if true; 
      // users to update pace if they're the author of the path
      allow update: if request.auth.uid == get(/databases/$(database)/documents/paths/$(resource.data.path)).data.author;
      // deny all deletes
      allow delete: if false;
    }
    
    match /paths:taken/{pathId} {
      // anyone can read and create
      allow read, create: if true;
      // users to update path if they're the author
      allow update: if request.auth.uid == resource.data.taker;
      // deny all deletes
      allow delete: if false;
    }

    match /paces:taken/{paceId} {
      // anyone can read and create
      allow read, create: if true; 
      // users to update pace if they're the author of the path
      allow update: if request.auth.uid == get(/databases/$(database)/documents/paths/$(resource.data.path)).data.taker;
      // deny all deletes
      allow delete: if false;
    }

  }
}


// service cloud.firestore {
//   match /databases/{database}/documents {
//     // Make sure the uid of the requesting user matches name of the user
//     // document. The wildcard expression {userId} makes the userId variable
//     // available in rules.
//     match /users/{userId} {
//       allow read, update, delete: if request.auth != null && request.auth.uid == userId;
//       allow create: if request.auth != null;
//     }
//   }
// }
